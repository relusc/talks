{"files":[{"id":"d93b969b-da3f-4225-97ae-953cf452077d","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"Europe/Berlin\",\n  \"dependencies\": {\n    \"enabledAdvancedServices\": [\n      {\n        \"userSymbol\": \"Drive\",\n        \"version\": \"v3\",\n        \"serviceId\": \"drive\"\n      }\n    ]\n  },\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\"\n}"},{"id":"52401b01-8d41-445d-bd52-88869775a898","name":"Code","type":"server_js","source":"// Only updatable content as of 2024 is Slides and Sheets\nconst driveListQuery \u003d \"(mimeType\u003d\u0027application/vnd.google-apps.presentation\u0027 or mimeType\u003d\u0027application/vnd.google-apps.spreadsheet\u0027) and trashed\u003dfalse\"\n\n// Entrypoint function\nfunction updateLinkedContent() {\n    // Turns data execution on for BigQuery data sources that are used for some Google sheets\n    SpreadsheetApp.enableBigQueryExecution()\n\n    var content \u003d getAllFilesToBeUpdated()\n\n    // No update in Docs for any linked content\n    for (var index in content) {\n      switch (content[index].mimeType) {\n          case \"application/vnd.google-apps.presentation\":\n              try {\n                  let presentation \u003d SlidesApp.openById(content[index].id)\n                  let slides \u003d presentation.getSlides()\n                  for (var slideIndex in slides) {\n                      // Refresh linked slide\n                      if (slides[slideIndex].getSlideLinkingMode() \u003d\u003d SlidesApp.SlideLinkingMode.LINKED) {\n                          slides[slideIndex].refreshSlide()\n                      }\n        \n                      // Refresh linked sheets chart\n                      let charts \u003d slides[slideIndex].getSheetsCharts()\n        \n                      for (var chartIndex in charts) {\n                        charts[chartIndex].refresh()\n                      }\n                  }\n                  console.log(`Presentation ${content[index].id} updated successfully`);\n              }\n              catch (err) {\n                  console.log(`Presentation ${content[index].id} could not be updated: ${err.message}`);\n              }\n              break;\n          case \"application/vnd.google-apps.spreadsheet\":\n              try {\n                  let sheet \u003d SpreadsheetApp.openById(content[index].id)\n                  // Only content to be updated are data sources\n                  sheet.refreshAllDataSources()\n                  console.log(`Spreadsheet ${content[index].id} updated successfully`);\n              }\n              catch (err) {\n                  console.log(`Spreadsheet ${content[index].id} could not be updated: ${err.message}`);   \n              }\n              break;\n          default:\n              console.log(\"Unexpected mime type.\")\n              break;\n            }\n        }\n}\n\nfunction getAllFilesToBeUpdated() {\n    var result \u003d new Array();\n\n    var pageToken, page;\n    do {\n        // More parameters are needed when accessing shared drives\n        //var optionalArgs \u003d { corpora: \"allDrives\", includeItemsFromAllDrives: true, supportsAllDrives: true, q: driveListQuery, maxResults: 500, pageToken: pageToken }\n        var optionalArgs \u003d { q: driveListQuery, maxResults: 500, pageToken: pageToken }\n        page \u003d Drive.Files.list(optionalArgs)\n        var allFiles \u003d page.files\n    \n        for (var file in allFiles) {\n            result.push(allFiles[file])\n        }\n    \n        pageToken \u003d page.nextPageToken;\n    }\n    while (pageToken);\n\n    console.log(`${result.length} files will be updated`)\n\n    return result;\n}\n"}]}