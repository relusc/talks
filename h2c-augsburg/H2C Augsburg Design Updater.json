{"files":[{"id":"af0bd22e-0c65-4cbc-99b8-c09ccb75465b","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"Europe/Berlin\",\n  \"dependencies\": {\n    \"enabledAdvancedServices\": [\n      {\n        \"userSymbol\": \"Drive\",\n        \"version\": \"v3\",\n        \"serviceId\": \"drive\"\n      }\n    ]\n  },\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\"\n}"},{"id":"4d4357ba-62c5-4633-9379-6f7bf50842b4","name":"Code","type":"server_js","source":"// Master Slide Deck presentation ID\n// \"Shiftavenue Master Slides - Sample\" in personal drive / space\nconst masterSlideDeckID \u003d \"1Rg6z2yxYyCyAcEoETNsoriO-78oGpT8BoyKLoUgrZqk\"\n\n// ID of \"Auto Design Update\" label\nconst autoDesignUpdateLabelID \u003d \"MCa3pljZAu6ZLsCObr8r0a03yIQryVVKXGdSNNEbbFcb\"\n// ID of label text field (yes, this is necessary, you cannot use the name)\nconst autoDesignUpdateLabelTextFieldID \u003d \"051D3058F7\"\n// ID of label text field value representing \u0027True\u0027 (yes, this is also necessary, you cannot use the actual string value, help me)\nconst autoDesignUpdateLabelTextFieldValueID \u003d \"08B2014155\"\n\n// Drive API search query to get all Google Slides presentations\nconst driveListQuery \u003d `mimeType\u003d\u0027application/vnd.google-apps.presentation\u0027 and trashed\u003dfalse and labels/${autoDesignUpdateLabelID}.${autoDesignUpdateLabelTextFieldID}\u003d\u0027${autoDesignUpdateLabelTextFieldValueID}\u0027`\n\n// Entrypoint function\nfunction runDesignUpdate() {\n  var allSlides \u003d getAllSlidesToBeUpdated();\n\n  var masterPres \u003d SlidesApp.openById(masterSlideDeckID);\n  // Use first slide to be able to copy latest design to all presentations\n  var masterTemplateSlide \u003d masterPres.getSlides()[0]\n\n  for (let i \u003d 0; i \u003c allSlides.length; i++) {\n    try {\n      let s \u003d SlidesApp.openById(allSlides[i].id);\n      s.appendSlide(masterTemplateSlide);\n      // Remove old master layout\n      s.getMasters()[0].remove();\n      // Remove appended slide\n      s.getSlides()[(s.getSlides().length)-1].remove();\n  \n      console.log(`Presentation ${allSlides[i].id} updated successfully`);\n    }\n    catch(err) {\n      console.log(`Presentation ${allSlides[i].id} could not be updated: ${err.message}`);\n    }\n  }\n}\n\nfunction getAllSlidesToBeUpdated() {\n  var result \u003d new Array();\n  var pageToken, page;\n  do {\n    // More parameters are needed when accessing shared drives\n    // var optionalArgs \u003d { corpora: \"allDrives\", includeItemsFromAllDrives: true, supportsAllDrives: true, q: driveListQuery, maxResults: 500, pageToken: pageToken };\n    var optionalArgs \u003d { q: driveListQuery, maxResults: 500, pageToken: pageToken }\n    page \u003d Drive.Files.list(optionalArgs);\n    var allFiles \u003d page.files;\n\n    for (var file in allFiles) {\n      result.push(allFiles[file]);\n    }\n\n    pageToken \u003d page.nextPageToken;\n  }\n  while (pageToken);\n\n  return result;\n}\n"}]}